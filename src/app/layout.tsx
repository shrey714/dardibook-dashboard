"use client"; // Mark the component as a Client Component
import "./globals.css";
import { Alegreya_Sans } from "next/font/google";
import { useEffect } from "react";
import { useRouter, usePathname } from "next/navigation"; // Correct import for app directory
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "../firebase/firebaseConfig";
import { setUser, clearUser } from "../redux/store";
import { useAppDispatch } from "../redux/store";
import { Provider } from "react-redux";
import store from "../redux/store";
import Script from "next/script";
// import type { Metadata } from "next";

const alegreya_sans = Alegreya_Sans({
  subsets: ["latin"],
  display: "swap",
  weight: ["300", "400", "500", "700"],
});
const extractUserData = (user: any) => {
  return {
    uid: user?.uid,
    email: user?.email,
    displayName: user?.displayName,
    photoURL: user?.photoURL,
    // Add any other serializable properties you need
  };
};
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const AppWrapper = ({ children }: { children: React.ReactNode }) => {
  const [user, loading, error] = useAuthState(auth);
  const dispatch = useAppDispatch();
  const router = useRouter();
  const pathname = usePathname();
  // contains the paths of the pages where authentication is not required
  const publicPaths = ["/documents"];
  const pathRequiresAuth = !publicPaths.some((path) =>
    pathname.startsWith(path)
  );

  useEffect(() => {
    if (pathRequiresAuth) {
      if (!loading) {
        if (user) {
          dispatch(setUser(extractUserData(user)));
        } else {
          dispatch(clearUser());
          router.push("/auth/signin");
        }
      }
    }
  }, [user, loading, error, dispatch, router, pathRequiresAuth]);

  {
    return loading ? (
      <view className="full-screen">
        <span className="loading loading-dots loading-lg"></span>
      </view>
    ) : (
      <>{children}</>
    );
  }
};

const RootLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <>
      <Script
        id="razorpay-checkout-js"
        src="https://checkout.razorpay.com/v1/checkout.js"
      />
      <html lang="en" className={alegreya_sans.className}>
        <body>
          <Provider store={store}>
            <AppWrapper>{children}</AppWrapper>
          </Provider>
        </body>
      </html>
    </>
  );
};

export default RootLayout;
