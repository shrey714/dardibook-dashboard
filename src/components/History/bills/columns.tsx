"use client";

import { ColumnDef } from "@tanstack/react-table";
import { Bill } from "@/components/History/dataSchema/schema";
import { DataTableColumnHeader } from "@/components/History/common/data-table-column-header";
import { Button } from "@/components/ui/button";
import { CopyButton } from "@/components/common/CopyToClipboard";
import { usePatientHistoryModalStore } from "@/lib/stores/patientHistoryModalStore";
import { format } from "date-fns";
import { DataTableColumnFilter } from "../common/data-table-column-filter";
import { Badge } from "@/components/ui/badge";

export const columns: ColumnDef<Bill>[] = [
  {
    accessorKey: "bill_id",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Bill Id" />
    ),
    cell: ({ row }) => (
      <div className="flex flex-col justify-start items-start">
        <p className="text-sm font-normal flex flex-row gap-2">
          {row.original.bill_id}
          <CopyButton
            className="align-middle z-0"
            value={row.original.bill_id}
          />
        </p>
        <p className="text-sm text-muted-foreground">
          {row.original.prescription_id ?? "-"}
        </p>
      </div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: true,
  },
  {
    accessorKey: "name",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Patient" />
    ),
    cell: ({ row }) => (
      <div className="flex flex-col justify-start items-start">
        <p className="text-sm font-normal">{row.original.name}</p>
        <p className="text-sm text-muted-foreground">
          {row.original.patient_id ? (
            <PatientButton patientId={row.original.patient_id} />
          ) : (
            "-"
          )}
        </p>
      </div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: true,
  },
  {
    accessorKey: "generated_at",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Generated At" />
    ),
    cell: ({ row }) => (
      <div className="space-x-2 text-nowrap">
        {format(row.original.generated_at, "dd/MM/yyyy hh:mm a")}
      </div>
    ),
    enableSorting: true,
    enableHiding: false,
    enableGlobalFilter: false,
  },
  {
    accessorKey: "prescribed_by",
    header: ({ column }) => (
      <>
        <DataTableColumnHeader column={column} title="Prescribed By" />
        <DataTableColumnFilter column={column} />
      </>
    ),
    cell: ({ row }) => (
      <div className="space-x-2">{row.original.prescribed_by ?? "-"}</div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: false,
    meta: {
      filterVariant: "select",
    },
  },
  {
    accessorKey: "generated_by",
    header: ({ column }) => (
      <>
        <DataTableColumnHeader column={column} title="Generated By" />
        <DataTableColumnFilter column={column} />
      </>
    ),
    cell: ({ row }) => (
      <div className="space-x-2">{row.original.generated_by}</div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: false,
    meta: {
      filterVariant: "select",
    },
  },
  {
    accessorKey: "payment_status",
    header: ({ column }) => (
      <>
        <DataTableColumnHeader column={column} title="Payment Status" />
        <DataTableColumnFilter column={column} />
      </>
    ),
    cell: ({ row }) => (
      <div className="flex space-x-2">
        <Badge
          className={`font-medium ${
            row.original.payment_status === "Paid"
              ? "bg-green-200 text-green-800"
              : row.original.payment_status === "Unpaid"
              ? "bg-red-200 text-red-800"
              : row.original.payment_status === "Refunded"
              ? "bg-yellow-200 text-yellow-800"
              : "bg-gray-200 text-gray-800"
          }`}
        >
          {row.original.payment_status}
        </Badge>
      </div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: false,
    meta: {
      filterVariant: "select",
    },
  },
  {
    accessorKey: "payment_method",
    header: ({ column }) => (
      <>
        <DataTableColumnHeader column={column} title="Payment Method" />
        <DataTableColumnFilter column={column} />
      </>
    ),
    cell: ({ row }) => (
      <div className="space-x-2">{row.original.payment_method ?? "-"}</div>
    ),
    enableSorting: false,
    enableHiding: false,
    enableGlobalFilter: false,
    meta: {
      filterVariant: "select",
    },
  },
  {
    accessorKey: "total_amount",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Total Amount" />
    ),
    cell: ({ row }) => (
      <div className="flex flex-col justify-start items-start">
        <p className="text-sm font-normal">₹{row.original.total_amount}</p>
        <p className="text-xs text-muted-foreground">
          - ₹{row.original.discount} / {row.original.tax_percentage}%
        </p>
      </div>
    ),
    enableSorting: true,
    enableHiding: false,
    enableGlobalFilter: false,
  },
];

const PatientButton = ({ patientId }: { patientId: string }) => {
  const { openModal } = usePatientHistoryModalStore();

  return (
    <Button
      variant="link"
      className="text-muted-foreground text-sm p-0 h-min underline"
      onClick={() => openModal({ patientId })}
    >
      {patientId}
    </Button>
  );
};
